"use strict";function _instanceof(t,e){return null!=e&&"undefined"!=typeof Symbol&&e[Symbol.hasInstance]?e[Symbol.hasInstance](t):t instanceof e}function _toConsumableArray(t){return _arrayWithoutHoles(t)||_iterableToArray(t)||_nonIterableSpread()}function _nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance")}function _iterableToArray(t){if(Symbol.iterator in Object(t)||"[object Arguments]"===Object.prototype.toString.call(t))return Array.from(t)}function _arrayWithoutHoles(t){if(Array.isArray(t)){for(var e=0,r=new Array(t.length);e<t.length;e++)r[e]=t[e];return r}}function _typeof(t){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}var Scrambler=function(t){var e,r=function(t){var e=t||1,r=Math.random().toString(36).replace(/[^a-z]+/g,"").substr(0,e);if(" \t\n\r\v".indexOf(r)<0)return r},n=!!(e=t)&&e.constructor===Object||"object"==_typeof(t);n&&(t.target=void 0!==t.target&&n?t.target:"[data-scrambler]",t.random=void 0!==t.random&&n?t.random:[1e3,3e3],t.speed=void 0!==t.speed&&n?t.speed:100,t.text=!(void 0===t.text||!n)&&t.text);var o=function(){return n?t.random[0]+(Math.random()*(1-t.random[1])+t.random[1]):-2999*Math.random()+3e3+1e3};!function(t){_toConsumableArray(n?document.querySelectorAll(t.target):document.querySelectorAll(t)).forEach(function(e,n){if("true"!==e.getAttribute("data-scramble-active")){e.setAttribute("data-scramble-active","true");var a=e.textContent.split(""),i=e.innerHTML,u=a,c=e.textContent.split(""),l=[],f=t.speed?t.speed:100,s=!1,d=function(t){var n=t||e.textContent;a=n.split(""),c=n.split(""),u=[],a.forEach(function(t,e){" \t\n\r\v".indexOf(a[e])>-1?u.push(" "):u.push(r())}),u=u};t.text&&""!==t.text&&("string"==typeof t.text||_instanceof(t.text,String))?(d(t.text),s=!0):e.getAttribute("data-scramble-text")&&""!==e.getAttribute("data-scramble-text")&&(d(e.getAttribute("data-scramble-text")),s=!0);var m=setInterval(function(){if(u.map(function(t,n){" \t\n\r\v".indexOf(t)>-1||(c[n]=r(),setTimeout(function(){l[n]=!0},o()),!0===l[n]&&(c[n]=a[n]),e.textContent=c.join(""))}),c.length==a.length&&c.every(function(t,e){return t===a[e]})){if(e.innerHTML=i,s){var t=e.children[0];t&&""!==t?t.textContent=c.join(""):e.textContent=c.join("")}clearInterval(m),e.setAttribute("data-scramble-active","false")}},f)}})}(t)};"undefined"!=typeof module&&void 0!==module.exports&&(module.exports=Scrambler);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
